"use strict";const n=require("electron");n.contextBridge.exposeInMainWorld("electron",{ipcRenderer:{on(...e){const[o,r]=e;return n.ipcRenderer.on(o,(t,...i)=>r(t,...i))},off(...e){const[o,...r]=e;return n.ipcRenderer.off(o,...r)},send(...e){const[o,...r]=e;return n.ipcRenderer.send(o,...r)},invoke:(e,o)=>{if(["get-app-path","connect-to-db","disconnect-from-db","get-tables","get-table-data","get-primary-key","update-cell","execute-query","save-query","get-saved-queries","delete-query"].includes(e))return n.ipcRenderer.invoke(e,o);throw new Error(`Unauthorized IPC channel: ${e}`)}}});n.contextBridge.exposeInMainWorld("database",{connect:e=>(console.log("[Preload] connect with ID:",e),n.ipcRenderer.invoke("db:connect",e)),disconnect:e=>(console.log("[Preload] disconnect with ID:",e),n.ipcRenderer.invoke("db:disconnect",e)),query:(e,o)=>(console.log("[Preload] query with ID:",e),n.ipcRenderer.invoke("db:query",e,o)),getTables:e=>(console.log("[Preload] getTables called with ID:",e),n.ipcRenderer.invoke("db:getTables",e)),getPrimaryKey:(e,o)=>(console.log("[Preload] getPrimaryKey with ID:",e,"table:",o),n.ipcRenderer.invoke("db:getPrimaryKey",e,o)),updateCell:(e,o,r,t,i,d)=>(console.log("[Preload] updateCell with ID:",e),n.ipcRenderer.invoke("db:updateCell",e,o,r,t,i,d)),isConnected:e=>(console.log("[Preload] isConnected with ID:",e),n.ipcRenderer.invoke("db:isConnected",e)),getActiveConnections:()=>n.ipcRenderer.invoke("db:getActiveConnections"),getDatabaseSchema:e=>(console.log("[Preload] getDatabaseSchema with ID:",e),n.ipcRenderer.invoke("db:getDatabaseSchema",e)),getTableStructure:(e,o)=>n.ipcRenderer.invoke("db:getTableStructure",e,o),addRow:(e,o,r)=>(console.log("[Preload] addRow with ID:",e,"table:",o,"data:",r),n.ipcRenderer.invoke("db:addRow",e,o,r))});n.contextBridge.exposeInMainWorld("windowManager",{openConnectionWindow:(e,o,r)=>(console.log("[Preload] opening new window for connection:",e,o,r),n.ipcRenderer.invoke("window:openConnectionWindow",e,o,r)),setMainWindowFullscreen:()=>(console.log("[Preload] setting main window to fullscreen"),n.ipcRenderer.invoke("window:setMainWindowFullscreen")),focusConnectionWindow:e=>(console.log("[Preload] focusing window for connection:",e),n.ipcRenderer.invoke("window:focusConnectionWindow",e)),getCurrentWindowId:()=>(console.log("[Preload] getting current window ID"),n.ipcRenderer.invoke("window:getCurrentWindowId")),setWindowFullscreen:e=>(console.log("[Preload] setting window to fullscreen:",e),n.ipcRenderer.invoke("window:setWindowFullscreen",e))});n.contextBridge.exposeInMainWorld("api",{onWindowClosed:e=>{n.ipcRenderer.on("window:closed",(o,r)=>{e(r)})},offWindowClosed:()=>{n.ipcRenderer.removeAllListeners("window:closed")},getOpenWindows:()=>n.ipcRenderer.invoke("window:getOpenWindows")});n.contextBridge.exposeInMainWorld("store",{getConnections:()=>n.ipcRenderer.invoke("store:getConnections"),addConnection:e=>n.ipcRenderer.invoke("store:addConnection",e),deleteConnection:e=>n.ipcRenderer.invoke("store:deleteConnection",e),isConnected:e=>n.ipcRenderer.invoke("db:isConnected",e),getActiveConnections:()=>n.ipcRenderer.invoke("db:getActiveConnections"),getSettings:()=>n.ipcRenderer.invoke("store:getSettings"),updateSettings:e=>n.ipcRenderer.invoke("store:updateSettings",e),updateAISettings:e=>n.ipcRenderer.invoke("store:updateAISettings",e)});
